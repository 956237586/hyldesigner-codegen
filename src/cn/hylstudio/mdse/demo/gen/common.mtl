[comment encoding = UTF-8 /]
[module common('http://mdse.hylstudio.cn/hyldesigner')]

[comment]TODO refactor to same EType[/comment]
[query public genClassName (aDto : Dto) : String = aDto.name.toUpperFirst() + 'Dto'/]
[query public genClassName (aRequestPayload : RequestPayload) : String = aRequestPayload.name.toUpperFirst() + 'RequestPayload'/]
[query public genClassName (aResponseResult : ResponseResult) : String = aResponseResult.name.toUpperFirst() + 'ResponseResult'/]
[query public genClassName (aController : Controller) : String = aController.name.toUpperFirst() + 'Controller'/]

[template public convertPackageNameToFilePath(packageName: String) post(trim())]
	[packageName.replaceAll('\\.', '/')/]
[/template]

[template public classNameToFileName(className: String, suffix: String) post(trim())]
	[className.toUpperFirst().concat('.' + suffix)/]
[/template]

[template public genPlainClass(className: String, content: String) post(trim())]
[comment]这种模板是文件内容，java文件中间的内容尽量不要有缩进[/comment]
public class [className/] {
[content/]
}
[/template]

[template public genNoArgsConstructor(className: String) post(trim())]
public [className/](){
}
[/template]

[template public genPrivateJavaField(anAttr:Attr) post(trim())]
private [mappingType(anAttr)/] [anAttr.name.toLowerFirst()/];
[/template]

[template public genGetterAndSetter(anAttr:Attr) post(trim())]
[genGetter(anAttr)/]

[genSetter(anAttr)/]
[/template]

[template public genGetter(anAttr:Attr) post(trim())]
public [mappingType(anAttr)/] [genGetterMethodName(anAttr)/]() {
    return [anAttr.name.toLowerFirst()/];
}
[/template]

[template public genSetter(anAttr:Attr) post(trim())]
public void [genSetterMethodName(anAttr)/]([mappingType(anAttr)/] [anAttr.name.toLowerFirst()/]) {
    this.[anAttr.name.toLowerFirst()/] = [anAttr.name.toLowerFirst()/];
}
[/template]

[template public genGetterMethodName(anAttr:Attr) post(trim())]
get[anAttr.name.toUpperFirst()/]
[/template]

[template public genSetterMethodName(anAttr:Attr) post(trim())]
set[anAttr.name.toUpperFirst()/]
[/template]


[template public genGetterMethodInvoke(varRef:String, anAttr:Attr) post(trim())]
[varRef/].[genGetterMethodName(anAttr)/]()
[/template]

[template public genPropertieInvoke(varRefName:String, anAttr:Attr) post(trim())]
[varRefName/].[anAttr.name/]
[/template]

[template public mappingType(anAttr:Attr) post(trim())]
[let type:Type = anAttr.type]
[mappingType(anAttr.type)/]
[elselet attr: ReferAttr = anAttr]
[mappingType(attr.attrRef.type)/]
[else]
//mappingType unknown type
[/let]
[/template]

[template public mappingType(aType:Type) post(trim())]
[let aPrimitiveType:PrimitiveType = aType]
[mappingPrimitiveType(aPrimitiveType)/]
[elselet aReferencedType: ReferencedType = aType]
[mappingReferencedType(aReferencedType)/]
[else][comment 兜个底/]
[mappingReferencedType(aType.oclAsType(ReferencedType))/]
[/let]
[/template]

[template private mappingReferencedType(aReferencedType:ReferencedType) post(trim())]
[let aDto:Dto = aReferencedType]
[aDto.genClassName()/]
[elselet aRequestPayload: RequestPayload = aReferencedType]
[aRequestPayload.genClassName()/]
[elselet aResponseResult: ResponseResult = aReferencedType]
[aResponseResult.genClassName()/]
[else]
Object
[/let]
[/template]

[template private mappingPrimitiveType(aPrimitiveType: PrimitiveType) post(trim())]
[let aStr:Str = aPrimitiveType]
String
[elselet aInt:Int = aPrimitiveType]
Integer
[elselet aLong:Long = aPrimitiveType]
Long
[elselet aBool:Bool = aPrimitiveType]
Boolean
[elselet aCustom:CustomPrimitiveType = aPrimitiveType]
[aCustom.type.toUpperFirst()/]
[/let]
[/template]

[template public genStrArr(strList:OrderedSet(String)) post(trim())]
[for(str: String| strList) separator (',')]
"[str/]"
[/for]
[/template]

[template public genLogger(className:String) post(trim())]
private static final Logger LOGGER = LoggerFactory.getLogger([className/].class);
[/template]
