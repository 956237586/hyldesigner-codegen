[comment encoding = UTF-8 /]
[module common('http://mdse.hylstudio.cn/hyldesigner')]

[import cn::hylstudio::mdse::demo::gen::classNameGenerator/]
[import cn::hylstudio::mdse::demo::gen::dto/]
[import cn::hylstudio::mdse::demo::gen::requestPayload/]


[template public convertPackageNameToFilePath(packageName: String) post(trim())]
	[packageName.replaceAll('\\.', '/')/]
[/template]

[template public classNameToFileName(className: String, suffix: String) post(trim())]
	[className.toUpperFirst().concat('.' + suffix)/]
[/template]

[template public genPlainClass(className: String, content: String) post(trim())]
[comment]这种模板是文件内容，java文件中间的内容尽量不要有缩进[/comment]
public class [className/] {
[content/]
}
[/template]

[template public genNoArgsConstructor(className: String) post(trim())]
public [className/](){
}
[/template]

[template public genPrivateJavaField(anAttr:Attr) post(trim())]
private [mappingType(anAttr)/] [anAttr.name.toLowerFirst()/];
[/template]

[template public genGetterAndSetter(anAttr:Attr) post(trim())]
[genGetter(anAttr)/]

[genSetter(anAttr)/]
[/template]
[template public genGetterMethodName(anAttr:Attr) post(trim())]
get[anAttr.name.toUpperFirst()/]
[/template]
[template public genSetterMethodName(anAttr:Attr) post(trim())]
set[anAttr.name.toUpperFirst()/]
[/template]
[template public genGetter(anAttr:Attr) post(trim())]
public [mappingType(anAttr)/] [genGetterMethodName(anAttr)/]() {
    return [anAttr.name.toLowerFirst()/];
}
[/template]
[template public genSetter(anAttr:Attr) post(trim())]
public void [genSetterMethodName(anAttr)/]([mappingType(anAttr)/] [anAttr.name.toLowerFirst()/]) {
    this.[anAttr.name.toLowerFirst()/] = [anAttr.name.toLowerFirst()/];
}
[/template]
[template public mappingType(anAttr:Attr) post(trim())]
[mappingType(anAttr.type)/]
[/template]

[template public mappingType(aType:Type) post(trim())]
[if(aType.oclIsTypeOf(PrimitiveType))]
	[mappingPrimitiveType(aType.oclAsType(PrimitiveType).type)/]
[elseif (aType.oclIsTypeOf(ReferencedType))]
	[mappingReferencedType(aType.oclAsType(ReferencedType))/]
[else][comment 兜个底/]
	[mappingReferencedType(aType.oclAsType(ReferencedType))/]
[/if]
[/template]

[template private mappingReferencedType(aReferencedType:ReferencedType) post(trim())]
[if(aReferencedType.oclIsTypeOf(Dto))]
	[aReferencedType.oclAsType(Dto).genClassName()/]
[elseif (aReferencedType.oclIsTypeOf(RequestPayload))]
	[aReferencedType.oclAsType(RequestPayload).genClassName()/]
[elseif (aReferencedType.oclIsTypeOf(ResponseResult))]
	[aReferencedType.oclAsType(ResponseResult).genClassName()/]
[else]
	Object
[/if]
[/template]

[template private mappingPrimitiveType(type: String) post(trim())]
[let typeLower: String = type.toLowerCase()]
	[if (typeLower.startsWith('str'))]
	String
	[elseif (typeLower.startsWith('int'))]
	Integer
	[elseif (typeLower.startsWith('bool'))]
	Boolean
	[else]
	[type.toUpperFirst()/]
	[/if]
[/let]
[/template]

[template public genStrArr(mappings:OrderedSet(String)) post(trim())]
[for(mapping: String| mappings) separator (',')]
"[mapping/]"
[/for]
[/template]


[template public genLogger(className:String) post(trim())]
private static final Logger LOGGER = LoggerFactory.getLogger([className/].class);
[/template]


[template public commonGenReferencedTypeCheckCode (varRef:String, type:Type, varRefName:String) post(trim()) ]
[if(type.oclIsTypeOf(Dto))]
[type.oclAsType(Dto).genCheckCode(varRef, varRefName)/]
[elseif (type.oclIsTypeOf(RequestPayload))]
[type.oclAsType(RequestPayload).genCheckCode(varRef, varRefName)/]
[comment][elseif (type.oclIsTypeOf(ResponseResult))][/comment]
[comment]	[type.oclAsType(ResponseResult).genCheckCode()/][/comment]
[else]

[/if]
[/template]