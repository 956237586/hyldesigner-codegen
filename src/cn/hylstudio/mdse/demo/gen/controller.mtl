[comment encoding = UTF-8 /]
[module controller('http://mdse.hylstudio.cn/hyldesigner')]
[import cn::hylstudio::mdse::demo::gen::common/]
[import cn::hylstudio::mdse::demo::gen::requestPayload/]
[import cn::hylstudio::mdse::demo::gen::responseResult/]
[import cn::hylstudio::mdse::demo::gen::classNameGenerator/]
[template public genClassFiles(aController : Controller) post(trim())]
[file (aController.queryJavaFilePath(), false)]
[aController.classFileTemplate()/]
[/file]
[/template]

[template public classFileTemplate (aController : Controller) post(trim())]
package [aController.queryFullPackageName()/];
[aController.genImports()/]
[aController.classContent()/]
[/template]

[template genImports(aController : Controller) ]
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import cn.hylstudio.mdse.demo.realworld.controller.BaseController;
[comment]TODO services[/comment]
import cn.hylstudio.mdse.demo.realworld.service.login.IBizLoginService;

[for(aRestInterface: RestInterface| aController.eAllContents(RestInterface)) separator ('\n')]
[genImportsPayload(aRestInterface)/][genImportsResponse(aRestInterface)/]
[/for]
[/template]

[template genImportsPayload(aRestInterface: RestInterface)]
[for(aParameter: Parameter| aRestInterface.eAllContents(Parameter)) separator ('\n')]
import [aParameter.type.oclAsType(RequestPayload).queryFullPackageName() + '.' + aParameter.type.oclAsType(RequestPayload).genClassName()/];
[/for]
[/template]

[template genImportsResponse(aRestInterface: RestInterface)]
import [aRestInterface.response.ref.type.oclAsType(ResponseResult).queryFullPackageName() + '.' + aRestInterface.response.ref.type.oclAsType(ResponseResult).genClassName()/];
[/template]

[template private classContent(aController : Controller)]
@RestController
@RequestMapping({[genStrArr(aController.mappings)/]})
public class [aController.genClassName()/] extends BaseController {
	[genLogger(aController.genClassName())/]

	[genFields(aController)/]

	[genInterfaces(aController)/]
}
[/template]

[template genFields(aController: Controller) post(trim())]
[for(aInvokeService: InvokeService| aController.eAllContents(InvokeService)) separator ('\n')]
@Autowired
private IBiz[aInvokeService.service.name.toUpperFirst()/] [aInvokeService.service.name/];
[/for]
[/template]

[template genInterfaces(aController : Controller) post(trim())]
[for(aRestInterface: RestInterface| aController.restInterface) separator ('\n')]
@RequestMapping(value = {[genStrArr(aRestInterface.mappings)/]}, method = {[genMethods(aRestInterface.methods)/]})
public [mappingType(aRestInterface.response.ref.type)/] [aRestInterface.name/](@RequestBody [genParamDefList(aRestInterface.params)/]) {
	[genMainFlow(aRestInterface)/]
}
[/for]
[/template]

[template genMainFlow(aRestInterface: RestInterface) post(trim())]
LOGGER.info("[aRestInterface.name/], [aRestInterface.params.name/] = ['['/]{}[']'/]", [aRestInterface.params.name/]);
[for(aOperation: Operation| aRestInterface.interfaceMainFlow.eAllContents(Operation)) separator ('\n')]
[mappingType(aOperation.response.type)/] [aOperation.response.name/] = [aOperation.oclAsType(InvokeService).service.name/].[aOperation.oclAsType(InvokeService).method/]([genParamList(aRestInterface.params)/]);
[/for]
return [aRestInterface.response.ref.name/];
[/template]

[template genParamDefList(parameters: OrderedSet(Parameter) ) post(trim())]
[for(aParameter: Parameter| parameters) separator (',\n')]
[aParameter.type.oclAsType(Type).mappingType()/] [aParameter.name/]
[/for]
[/template]

[template genParamList(parameters: OrderedSet(Parameter) ) post(trim())]
[for(aParameter: Parameter| parameters) separator (',')]
[aParameter.name/]
[/for]
[/template]

[template genMethods(methods:OrderedSet(String)) post(trim())]
[for(method: String| methods) separator (',')]
RequestMethod.[method/]
[/for]
[/template]


[query public queryFullPackageName (aController : Controller) : String = aController.ancestors(PackageDefine)->reverse().eGet('name')->sep('.') + ''/]
[query public queryJavaFilePath (aController : Controller) : String = convertPackageNameToFilePath(aController.queryFullPackageName()) + '/' + classNameToFileName(aController.genClassName(), 'java')/]



