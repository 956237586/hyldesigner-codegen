[comment encoding = UTF-8 /]
[module abstractCheckRule('http://mdse.hylstudio.cn/hyldesigner')]
[import cn::hylstudio::mdse::demo::gen::common/]

[template public genCheckCode (aReferencedType : ReferencedType, varRef:String, varRefName:String)  post(trim())]
[let aDto:Dto = aReferencedType]
[for(attr: Attr| aDto.attrs)]
[genOneAttrCheckCode(attr, varRef, varRefName)/]
[/for]
[elselet aRequestPayload: RequestPayload = aReferencedType]
[for(attr: Attr| aRequestPayload.attrs)]
[genOneAttrCheckCode(attr, varRef, varRefName)/]
[/for]
[/let]
[/template]

[template public genOneAttrCheckCode (attr:Attr, varRef:String, varRefName:String)  post(trim())]
[comment]实体完整性 and 参照完整性[/comment]
//[attr.name/] check begin
[let attr:ReferAttr = attr]
[if(not attr.attrRef.oclIsUndefined())]
[genDomainCheckCode(attr.attrRef, varRef, varRefName)/][genReferencedCheckCode(attr.attrRef, varRef, varRefName)/]
[/if]
[genDomainCheckCode(attr, varRef, varRefName)/][genReferencedCheckCode(attr, varRef, varRefName)/]
[/let]
[comment]TODO 用户定义完整性[/comment]
[/template]


[comment] domain check rules[/comment]
[template public genDomainCheckCode (attr : Attr, varRef:String, varRefName:String)post(trim())]
[for(anAbstractCheckRule : AbstractCheckRule | attr.eAllContents(AbstractCheckRule))]
[anAbstractCheckRule.genDomainCheckCode(varRef, attr, varRefName)/]
[/for]
[/template]

[template public genDomainCheckCode(anAbstractCheckRule : AbstractCheckRule, varRef:String, attr:Attr, varRefName:String) post(trim())]
[let type: Type = attr.type]
[genDomainPrimitiveTypeCheckCode(anAbstractCheckRule, varRef, attr, varRefName, type)/]
[elselet attr:ReferAttr = attr]
[genDomainPrimitiveTypeCheckCode(anAbstractCheckRule, varRef, attr, varRefName, attr.attrRef.type)/]
[else]
//[attr.name/] unknown attrType
[/let]
[/template]

[template public genDomainPrimitiveTypeCheckCode(anAbstractCheckRule : AbstractCheckRule, varRef:String, attr:Attr, varRefName:String, type:Type) post(trim())]
[let anAbstractCheckRule:PrimitiveTypeCheckRule = anAbstractCheckRule]
[let aPrimitiveType: PrimitiveType = type] 
[genPrimitiveChekRuleCode(anAbstractCheckRule, aPrimitiveType, varRef, attr, varRefName)/]
[/let]
[/let]
[/template]

[template public genPrimitiveChekRuleCode (aPrimitiveTypeCheckRule : PrimitiveTypeCheckRule, aPrimitiveType:PrimitiveType, varRef:String, attr:Attr, varRefName:String) post(trim()) ]
[let aType:String = mappingType(aPrimitiveType)]
	[if (aPrimitiveType.oclIsKindOf(Str) and aPrimitiveTypeCheckRule.oclIsKindOf(StringTypeCheckRule))]
[genStringTypeCheckCode(aPrimitiveTypeCheckRule.oclAsType(StringTypeCheckRule),  varRef, mappingType(attr), attr, varRefName)/]
	[elseif (aPrimitiveType.oclIsKindOf(Number) and aPrimitiveTypeCheckRule.oclIsKindOf(NumberTypeCheckRule))]
[genNumberTypeCheckCode(aPrimitiveTypeCheckRule.oclAsType(NumberTypeCheckRule),  varRef, aPrimitiveType, attr, varRefName)/]
	[elseif (aPrimitiveType.oclIsKindOf(Bool))]
[genBoolTypeCheckCode(aPrimitiveTypeCheckRule.oclAsType(BoolTypeCheckRule),  varRef, mappingType(attr), attr, varRefName)/]
	[else]
// [aType.toUpperFirst()/] check from genPrimitiveChekRuleCode
	[/if]
[/let]
[/template]

[template public genStringTypeCheckCode (aStringTypeCheckRule:StringTypeCheckRule, varRef:String, type:String, attr:Attr, varRefName:String) post(trim()) ]
[let rule:NotEmptyCheckRule = aStringTypeCheckRule]
[genNotEmptyCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr))/]
[elselet rule:LengthCheckRule = aStringTypeCheckRule]
[genStringLengthCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[elselet rule:RegexCheckRule = aStringTypeCheckRule]
[genStringRegexCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[else]
[comment]//genStringTypeCheckCode [varRef/]|[attr.name/]|[varRefName/] unknown[/comment]
[/let]
[/template]

[template public genNumberTypeCheckCode (aNumberTypeCheckRule:NumberTypeCheckRule, varRef:String, aPrimitiveType:PrimitiveType, attr:Attr, varRefName:String) post(trim()) ]
[let typeLower: String = mappingType(aPrimitiveType).toLowerCase()]
	[if (aPrimitiveType.oclIsKindOf(Int) and aNumberTypeCheckRule.oclIsKindOf(IntegerTypeCheckRule))]
[genIntegerTypeCheckCode(aNumberTypeCheckRule.oclAsType(IntegerTypeCheckRule),  varRef, aPrimitiveType.oclAsType(Int) , attr, varRefName)/]
	[elseif (aPrimitiveType.oclIsKindOf(Long) and aNumberTypeCheckRule.oclIsKindOf(LongTypeCheckRule))]
[genLongTypeCheckCode(aNumberTypeCheckRule.oclAsType(LongTypeCheckRule),  varRef,  aPrimitiveType.oclAsType(Long), attr, varRefName)/]
	[else]
	[/if]
[/let]
[/template]

[template public genIntegerTypeCheckCode (aIntegerTypeCheckRule:IntegerTypeCheckRule, varRef:String, aType:Int, attr:Attr, varRefName:String) post(trim()) ]
[let rule:IntegerRangeCheckRule = aIntegerTypeCheckRule]
[genIntegerRangeCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[else]
[/let]
[/template]

[template public genLongTypeCheckCode (aLongTypeCheckRule:LongTypeCheckRule, varRef:String, aType:Long, attr:Attr, varRefName:String) post(trim()) ]
[let rule:LongRangeCheckRule = aLongTypeCheckRule]
[genLongRangeCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[else]
[/let]
[/template]

[template public genBoolTypeCheckCode (aBoolTypeCheckRule:BoolTypeCheckRule, varRef:String, type:String, attr:Attr, varRefName:String) post(trim()) ]
[let rule:TrueValueCheckRule = aBoolTypeCheckRule]
[genBoolTypeTrueCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[elselet rule:FalseValueCheckRule = aBoolTypeCheckRule]
[genBoolTypeFalseCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr), rule)/]
[else]
[/let]
[/template]

[comment] refer check rules[/comment]
[template public genReferencedCheckCode (attr : Attr, varRef:String, varRefName:String) post(trim())]
[for(anAbstractCheckRule : AbstractCheckRule | attr.eAllContents(AbstractCheckRule))]
[anAbstractCheckRule.genReferencedCheckCode(varRef, attr, varRefName)/]
[/for]  
[/template]

[template public genReferencedCheckCode(anAbstractCheckRule : AbstractCheckRule, varRef:String, attr:Attr, varRefName:String) post(trim())]
[let type: Type = attr.type]
[genReferencedReferencedTypeCheckCode(anAbstractCheckRule, varRef, attr, varRefName, type)/]
[elselet attr:ReferAttr = attr]
[genReferencedReferencedTypeCheckCode(anAbstractCheckRule, varRef, attr, varRefName, attr.attrRef.type)/]
[else]
//[attr.name/] unknown attrType
[/let]
[/template]

[template public genReferencedReferencedTypeCheckCode(anAbstractCheckRule : AbstractCheckRule, varRef:String, attr:Attr, varRefName:String, type:Type) post(trim())]
[let aReferencedTypeCheckRule:ReferencedTypeCheckRule = anAbstractCheckRule]
[let aReferencedType: ReferencedType = type] 
[mappingReferencedRuleType(aReferencedTypeCheckRule, varRef, attr, varRefName)/]
[/let]
[/let]
[/template]

[template public mappingReferencedRuleType (aReferencedTypeCheckRule : ReferencedTypeCheckRule, varRef:String, attr:Attr, varRefName:String)  post(trim())]
[if(aReferencedTypeCheckRule.oclIsTypeOf(HasValueRefCheckRule))]
[genMustNotNullCheckRule(genGetterMethodInvoke(varRef, attr), genPropertieInvoke(varRefName, attr))/]
[mappingType(attr)/] [attr.name/] = [genGetterMethodInvoke(varRef, attr)/];
[genReferencedTypeCheckCode(attr.name, attr.type, genPropertieInvoke(varRef, attr))/]
[else]
//mappingReferencedRuleType [varRef/]|[attr.name/]|[varRefName/] unknown
[/if]
[/template]

[template public genReferencedTypeCheckCode (varRef:String, type:Type, varRefName:String) post(trim()) ]
[if(type.oclIsKindOf(ReferencedType))]
[commonGenReferencedTypeCheckCode(varRef, type, varRefName)/]
[/if]
[/template]

[template public commonGenReferencedTypeCheckCode (varRef:String, type:Type, varRefName:String) post(trim()) ]
[let type:Dto = type]
[type.genCheckCode(varRef, varRefName)/]
[elselet type:RequestPayload = type]
[type.genCheckCode(varRef, varRefName)/]
[comment][elselet (type:ResponseResult = type)][/comment]
[comment][type.genCheckCode(varRef, varRefName)/][/comment]
[else]
[/let]
[/template]

[comment]gen one rule[/comment]

[template public genMustNotNullCheckRule (varRef : String, varRefName:String) post(trim())]
ValueUtils.nonNull([varRef/], "empty [varRefName/]");
[/template]

[template public genNotEmptyCheckRule (varRef : String, varRefName:String) post(trim())]
ValueUtils.notEmpty([varRef/], "empty [varRefName/]");
[/template]

[template public genStringLengthCheckRule (varRef : String, varRefName:String, aLengthCheckRule:LengthCheckRule) post(trim())]
ValueUtils.checkLength([varRef/], [aLengthCheckRule.min/]L, [aLengthCheckRule.max/]L, "[varRefName/] length error");
[/template]

[template public genStringRegexCheckRule (varRef : String, varRefName:String, aRegexCheckRule:RegexCheckRule) post(trim())]
ValueUtils.checkRegex([varRef/], "[aRegexCheckRule.regex/]", "[varRefName/] regex check error");
[/template]

[template public genIntegerRangeCheckRule (varRef : String, varRefName:String, aIntegerRangeCheckRule:IntegerRangeCheckRule) post(trim())]
ValueUtils.nonNull([varRef/], "empty [varRefName/]");
ValueUtils.checkNumberRange([varRef/], [aIntegerRangeCheckRule.min/], [aIntegerRangeCheckRule.max/], "[varRefName/] range error");
[/template]

[template public genLongRangeCheckRule (varRef : String, varRefName:String, aLongRangeCheckRule:LongRangeCheckRule) post(trim())]
ValueUtils.nonNull([varRef/], "empty [varRefName/]");
ValueUtils.checkNumberRange([varRef/], [aLongRangeCheckRule.min/]L, [aLongRangeCheckRule.max/]L, "[varRefName/] range error");
[/template]

[template public genBoolTypeTrueCheckRule (varRef : String, varRefName:String, aLongRangeCheckRule:TrueValueCheckRule) post(trim())]
ValueUtils.checkTrue([varRef/], "[varRefName/] value error");
[/template]

[template public genBoolTypeFalseCheckRule (varRef : String, varRefName:String, aLongRangeCheckRule:FalseValueCheckRule) post(trim())]
ValueUtils.checkFalse([varRef/], "[varRefName/] value error");
[/template]